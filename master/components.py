#######################################################
# components.py - Collection of classes describing ship components
# Authors : Justin Sweitzer, Ben Sweitzer
# Started development 04/04/2013
# Version 0.1
#
#######################################################

class WarpCore():
    def __init__(self,Type):
        """ WarpCore is the power center of the vessel. It limits what the WarpEngines can do """
        TypeDict = {'Nuclear':1E10,'AntiMatter':3}
        self.Type = Type
        self.OutputPower = TypeDict[self.Type]
        
class WarpEngine():
    """ WarpEngine takes the power generated by the WarpCore and translates it into motion"""
    # Warp scale : velocity = c * wf^6.75
    def __init__(self,Type):
        TypeDict = {'EM':4, 'Gravitron':9.0} 
        self.Type = Type
        """ I know I am defining efficiency backwards. For some reason it just makes more
        sense to me this way """
        
        if self.Type = 'EM':
            Efficiency = 1.0
        else:
            Efficiency = 0.5
            
        self.MaxWarpFactor = TypeDict[self.Type] 
        """ Need to work out this math:
            2 EM engines with 2 Fission cores give you Wp 4 - (1000 ly in 31.5 days)
            2 EM engine with  1 Fission core gives you Wp 2 (linearly with power)
            1 EM engine with 2 Fission cores gives you Wp 3-ish (diminishing returns per engine)
            This will be implemented in the Ship() class
        """
        self.PowerConsumption = self.MaxWarpFactor^5 * Efficiency 
        """ at Warp 4.0, Efficiency = 1.0, require 1024 power units per ly
               Warp 9.9, Efficiency = 0.5, require 47549.5 units per ly
               Traverse 50,000 ly using 60% fuel (must trade to get back) ->
                 AntiMatter Core capacity must be (47549.5*50,000*0.6/max_cores_in_best_vessel) """
               
                                                                  
        
        # Diminishing returns on power consumption : WarpFactor ... shit... this needs to be in the Ship() class as well...

class MainComputer():